<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Threading.Net20</name>
    </assembly>
    <members>
        <member name="M:System.IO.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream)">
            <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream.
            </summary>
            <remarks>
            Copying begins at the current position in <paramref name="stream"/>.
            </remarks>
            <param name="stream">The source stream.</param>
            <param name="destination">The stream to which the contents of the source stream will be copied.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            <para>If <paramref name="stream"/> is disposed.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is disposed.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>If <paramref name="stream"/> does not support reading.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> does not support writing.</para>
            </exception>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream,
            using a specified buffer size.
            </summary>
            <remarks>
            Copying begins at the current position in <paramref name="stream"/>.
            </remarks>
            <param name="stream">The source stream.</param>
            <param name="destination">The stream to which the contents of the source stream will be copied.</param>
            <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="bufferSize"/> is negative or zero.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            <para>If <paramref name="stream"/> is disposed.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is disposed.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>If <paramref name="stream"/> does not support reading.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> does not support writing.</para>
            </exception>
        </member>
        <member name="M:System.IO.StreamExtensions.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the bytes from a source stream and writes them to a destination stream,
            using a specified buffer size and cancellation token.
            </summary>
            <remarks>
            <para>If the operation is canceled before it completes, the returned task contains the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>
            value for the <see cref="P:System.Threading.Tasks.Task.Status"/> property.</para>
            <para>
            Copying begins at the current position in <paramref name="stream"/>.
            </para>
            </remarks>
            <param name="stream">The source stream.</param>
            <param name="destination">The stream to which the contents of the source stream will be copied.</param>
            <param name="bufferSize">The size, in bytes, of the buffer. This value must be greater than zero. The default size is 81920.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="bufferSize"/> is negative or zero.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            <para>If <paramref name="stream"/> is disposed.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> is disposed.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            <para>If <paramref name="stream"/> does not support reading.</para>
            <para>-or-</para>
            <para>If <paramref name="destination"/> does not support writing.</para>
            </exception>
        </member>
        <member name="M:System.IO.StreamExtensions.FlushAsync(System.IO.Stream)">
            <summary>
            Asynchronously clears all buffers for a stream and causes any buffered data to be written to the underlying device.
            </summary>
            <remarks>
            If a derived class does not flush the buffer in its implementation of the <see cref="M:System.IO.Stream.Flush"/> method,
            the <see cref="M:System.IO.StreamExtensions.FlushAsync(System.IO.Stream)"/> method will not flush the buffer.
            </remarks>
            <param name="stream">The stream to flush.</param>
            <returns>A task that represents the asynchronous flush operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
        </member>
        <member name="M:System.IO.StreamExtensions.FlushAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Asynchronously clears all buffers for a stream and causes any buffered data to be written to the underlying device,
            and monitors cancellation requests.
            </summary>
            <remarks>
            <para>If the operation is canceled before it completes, the returned task contains the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>
            value for the <see cref="P:System.Threading.Tasks.Task.Status"/> property.</para>
            <para>
            If a derived class does not flush the buffer in its implementation of the <see cref="M:System.IO.Stream.Flush"/> method,
            the <see cref="M:System.IO.StreamExtensions.FlushAsync(System.IO.Stream)"/> method will not flush the buffer.
            </para>
            </remarks>
            <param name="stream">The stream to flush.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous flush operation.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="stream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously reads a sequence of bytes from a stream and advances the position within the stream by the number of bytes read.
            </summary>
            <remarks>
            Use the <see cref="P:System.IO.Stream.CanRead"/> property to determine whether the stream instance supports reading.
            </remarks>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to write the data into.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>
            A task that represents the asynchronous read operation. When the task completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if
            the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="buffer"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>If <paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para>If <paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.NotSupportedException">If <paramref name="stream"/> does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="stream"/> is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:System.IO.StreamExtensions.ReadAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads a sequence of bytes from a stream, advances the position within the stream by the number of bytes read,
            and monitors cancellation requests.
            </summary>
            <remarks>
            Use the <see cref="P:System.IO.Stream.CanRead"/> property to determine whether the stream instance supports reading.
            <para>
            If the operation is canceled before it completes, the returned task contains the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>
            value for the <see cref="P:System.Threading.Tasks.Task.Status"/> property.
            </para>
            </remarks>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to write the data into.</param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data from the stream.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A task that represents the asynchronous read operation. When the task completes successfully, the <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if
            the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="buffer"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>If <paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para>If <paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.NotSupportedException">If <paramref name="stream"/> does not support reading.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="stream"/> is currently in use by a previous read operation.</exception>
        </member>
        <member name="M:System.IO.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Asynchronously writes a sequence of bytes to a stream and advances the position within the stream by the number of bytes written.
            </summary>
            <remarks>
            Use the <see cref="P:System.IO.Stream.CanWrite"/> property to determine whether the stream instance supports writing.
            </remarks>
            <param name="stream">The stream to write data to.</param>
            <param name="buffer">The buffer to read the data from.</param>
            <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="buffer"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>If <paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para>If <paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.NotSupportedException">If <paramref name="stream"/> does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="stream"/> is currently in use by a previous write operation.</exception>
        </member>
        <member name="M:System.IO.StreamExtensions.WriteAsync(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a sequence of bytes to a stream, advances the position within the stream by the number of bytes written,
            and monitors cancellation requests.
            </summary>
            <remarks>
            Use the <see cref="P:System.IO.Stream.CanWrite"/> property to determine whether the stream instance supports writing.
            <para>
            If the operation is canceled before it completes, the returned task contains the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled"/>
            value for the <see cref="P:System.Threading.Tasks.Task.Status"/> property.
            </para>
            </remarks>
            <param name="stream">The stream to write data to.</param>
            <param name="buffer">The buffer to read the data from.</param>
            <param name="offset">The zero-based byte offset in buffer from which to begin copying bytes to the stream.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <para>If <paramref name="stream"/> is <see langword="null"/>.</para>
            <para>-or-</para>
            <para>If <paramref name="buffer"/> is <see langword="null"/>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>If <paramref name="offset"/> is negative.</para>
            <para>-or-</para>
            <para>If <paramref name="count"/> is negative.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
            If the sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.NotSupportedException">If <paramref name="stream"/> does not support writing.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="stream"/> has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">If <paramref name="stream"/> is currently in use by a previous write operation.</exception>
        </member>
    </members>
</doc>
